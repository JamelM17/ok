/* Written by David Biggs Aug 2021 */

/** FlappyGame contains the main game loop that manipulates the Pipes and Bird classes. */

class FlappyGame {
    field Pipes pipes1, pipes2;
    field int frameCount;
    field Bird bird;

    constructor FlappyGame new() {
        let pipes1 = Pipes.new(1);
        let pipes2 = Pipes.new(1);
        let frameCount = 0;
        let bird = Bird.new();
        return this;
    }

    function void showStartScreen() {
        do Output.moveCursor(8, 26);
        do Output.printString("Flappy Block");
        do Output.moveCursor(10, 20);
        do Output.printString("Controls: SPACEBAR to jump");
        do Output.moveCursor(11, 22);
        do Output.printString("Goal: Avoid the pipes");
        do Output.moveCursor(13, 19);
        do Output.printString("Press ENTER to start game");
        return;
    }

    function void showGameOver(int score, int highScore) {
        do Screen.setColor(false);
        do Screen.drawRectangle(150, 80, 300, 155);
        do Output.moveCursor(8, 28);
        do Output.printString("Game over");
        do Output.moveCursor(10, 28);
        do Output.printString("Score: ");
        do Output.printInt(score);
        do Output.moveCursor(11, 25);
        do Output.printString("High Score: ");
        do Output.printInt(highScore);
        do Output.moveCursor(13, 19);
        do Output.printString("Press ENTER to restart game");
        return;
    }

    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit, birdOnBottom, didJump, hasReleased, startGame, gameOver;
        var int pipeMod, score, highScore, pipeSpacing;
        let exit = false;
        let score = 0;
        let startGame = false;
        let pipeSpacing = 200;

        do FlappyGame.showStartScreen();
        while (~startGame) {
            let key = Keyboard.keyPressed();
            if (key = 128) {
                let startGame = true;
            }
        }
        do Screen.clearScreen();

        do bird.draw();
        
        while (~exit) {

            let key = Keyboard.keyPressed();
            if (key = 81)  { let exit = true; }     // q key
            if (key = 0) { let hasReleased = true; } // checks for release of spacebar
            if (key = 32) { let didJump = true; } // spacebar key

            // sets up the pipes using random seeds (player's position)
            if (frameCount = 150) {
                let pipes1 = Pipes.new(bird.getY());
                do pipes1.spawn();
            }
            if (frameCount = 400) {
                let pipes2 = Pipes.new(bird.getY());
                do pipes2.spawn();
            }

            do pipes1.moveLeft();
            do pipes2.moveLeft();

            /* check game state and take appropriate actions */
            if (didJump & hasReleased) {
               do bird.jump();
               let didJump = false;
               let hasReleased = false;
            }
            let birdOnBottom = bird.move();

            if (bird.justPassed(pipes1) | bird.justPassed(pipes2)) {
                let score = score + 1;
                if (score > highScore) {
                    let highScore = score;
                }
            }

            if (bird.overlapsWith(pipes1) | bird.overlapsWith(pipes2) | birdOnBottom) {
                let gameOver = true;
                do FlappyGame.showGameOver(score, highScore);
                let startGame = false;
                while (~startGame) {
                    let key = Keyboard.keyPressed();
                    if (key = 128) {
                        let startGame = true;
                        let pipes1 = Pipes.new(0);
                        let pipes2 = Pipes.new(1);
                        let frameCount = 0;
                        let bird = Bird.new();
                        let score = 0;
                        do Screen.clearScreen();
                        do bird.draw();
                    }
                }
            }

            do Output.moveCursor(10, 13);
            do Output.printInt(score);

            // slow the game down a bit for playability
            do Sys.wait(10);
            let didJump = false;
            let frameCount = frameCount + 1;

        } // while
        return;
    }

    method void dispose() {
        do pipes1.dispose();
        do Memory.deAlloc(this);
        return;
    }
}